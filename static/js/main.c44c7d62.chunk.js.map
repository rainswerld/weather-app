{"version":3,"sources":["App.js","Weather/Weather.js","apiConfig.js","serviceWorker.js","index.js"],"names":["global","fetch","unsplash","Unsplash","accessKey","App","useState","image","setImage","name","setName","useEffect","photos","getRandomPhoto","query","then","toJson","res","urls","regular","user","className","style","backgroundImage","backgroundSize","backgroundPosition","transition","Weather","timezoneHours","Date","getHours","timezoneMinutes","getMinutes","setQuery","weather","setWeather","type","placeholder","onChange","event","target","value","onKeyPress","e","key","apiConfig","base","json","data","console","log","catch","err","error","main","sys","country","today","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateSet","Math","round","temp","description","temp_max","temp_min","feels_like","api","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c44c7d62.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport Unsplash, { toJson } from 'unsplash-js'\nimport fetch from 'node-fetch'\nimport './App.css'\nimport api from './apiConfig'\nimport Weather from './Weather/Weather.js'\n\nglobal.fetch = fetch\n\nconst unsplash = new Unsplash({ accessKey: 'vRrjM47nn30k5-Et_4_ntkapy8oxBLWpbGGkiS7EzNw' })\n\nfunction App() {\n\n  const [image, setImage] = useState([])\n  const [name, setName] = useState('')\n\n  useEffect(() => {\n    unsplash.photos.getRandomPhoto({ query: 'epic nature' })\n      .then(toJson)\n      .then(res => {\n        setImage(res.urls.regular)\n        setName(res.user.name)\n      })\n  }, [])\n\n  return (\n    <div className=\"app\" style={{ backgroundImage: `url(${image})`, backgroundSize: 'cover', backgroundPosition: 'bottom', transition: 'ease-in' }}>\n      <main>\n        <Weather />\n        <div className=\"photo-cred\">\n          <p>Photo by {name}</p>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React, {useState } from 'react'\nimport apiConfig from '../apiConfig'\n\nfunction Weather() {\n  // Set today's date\n  const dateSet = (today) => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n\n    let day = days[today.getDay()]\n    let date = today.getDate()\n    let month = months[today.getMonth()]\n    let year = today.getFullYear()\n\n    return `${day} ${date} ${month}, ${year}`\n  }\n\n  // set the current time of the client's computer\n  const timezoneHours = (new Date().getHours())\n  const timezoneMinutes = (new Date().getMinutes())\n\n  // set the query parameter for api call to open weather api\n  const [query, setQuery] = useState('')\n  // set the data from open weather api\n  const [weather, setWeather] = useState({})\n\n  // make the api call to open weather\n  const search = e => {\n    if (e.key === \"Enter\") {\n      fetch(`${apiConfig.base}weather?q=${query}&units=imperial&APPID=${apiConfig.key}`)\n        .then(res => res.json())\n        .then(data => {\n          console.log(data)\n          setWeather(data)\n          setQuery('')\n        })\n        .catch(err => console.error(err))\n    }\n  }\n\n  return (\n    <div>\n      <div className=\"search-bar\">\n        <input\n          type=\"text\"\n          className=\"search-input\"\n          placeholder=\"WHERE YOU AT?\"\n          onChange={event => setQuery(event.target.value)}\n          value={query}\n          onKeyPress={search}\n        />\n      </div>\n      {(typeof weather.main != \"undefined\") ? (\n        <div className=\"full-report\">\n          <div className=\"location-box\">\n            <div className=\"location\">\n              {weather.name}, {weather.sys.country}\n              </div>\n            <div className=\"date\">{dateSet(new Date())}</div>\n          </div>\n          <div className=\"time-box\">\n            <div className=\"time\">\n              Current Time: {timezoneHours}:{timezoneMinutes}\n            </div>\n          </div>\n          <div className=\"temp-box\">\n            <div className=\"temp\">\n              {Math.round(weather.main.temp)}째F\n            </div>\n          </div>\n          <div className=\"weather-box\">\n            <div className=\"weather\">\n              {weather.weather[0].description}\n            </div>\n          </div>\n          <div className=\"temp-range-box\">\n            <div className=\"temp-range\">\n              H: {Math.round(weather.main.temp_max)}째F  L: {Math.round(weather.main.temp_min)}째F\n              <br />\n              Feels Like: {Math.round(weather.main.feels_like)}째F\n            </div>\n          </div>\n        </div>\n        ) : (\n          <div>\n            <div className=\"location-box\">\n              <div className=\"location\">\n                Type your city in the search bar above\n              </div>\n            </div>\n            <div className=\"time-box\">\n              <div className=\"time\">\n                Current Time: {timezoneHours}:{timezoneMinutes}\n              </div>\n            </div>\n          </div>\n        )}\n    </div>\n  )\n}\n\nexport default Weather\n","const api = {\n  key: 'b5b3cf559cab0215872c904822724628',\n  base: 'https://api.openweathermap.org/data/2.5/'\n}\n\nexport default api\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}